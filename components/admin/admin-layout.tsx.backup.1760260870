import { useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { AdminDateProvider, useAdminDate } from '../../src/lib/admin-date-context'
import { useBrandSettings } from '../../src/lib/ui-settings-context'
import { NotificationProvider, useNotifications } from '../../src/contexts/NotificationContext'

interface AdminLayoutProps {
  children: React.ReactNode
}

interface NavItem {
  name: string
  href: string
  icon: string
  badge?: string
}

  const navigation: NavItem[] = [
    { name: 'Dashboard', href: '/admin', icon: 'üìä' },
    { name: 'Analytics', href: '/admin/analytics', icon: 'üìà' },
    { name: 'Products & Inventory', href: '/admin/products-inventory', icon: 'üçé' },
    { name: 'Orders', href: '/admin/orders', icon: 'üì¶' },
    { name: 'Customers', href: '/admin/customers', icon: 'üë•' },
    { name: 'UI Management', href: '/admin/ui', icon: 'üé®' },
    { name: 'Notifications', href: '/admin/notifications', icon: 'üîî' },
    { name: 'Database', href: '/admin/database', icon: 'üóÑÔ∏è' },
    { name: 'Security', href: '/admin/security', icon: 'üîí' },
    { name: 'Settings', href: '/admin/settings', icon: '‚öôÔ∏è' },
  ]

// Date Selector Component
function DateSelector() {
  const { dateRange, setDateRange, formatDateRange } = useAdminDate()

  return (
    <div className="flex items-center space-x-2">
      <span className="text-sm text-gray-600 dark:text-gray-400">Date Range:</span>
      <select
        value={dateRange}
        onChange={(e) => setDateRange(e.target.value as any)}
        className="px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
      >
        <option value="1d">Today</option>
        <option value="7d">Last 7 days</option>
        <option value="30d">Last 30 days</option>
        <option value="90d">Last 90 days</option>
        <option value="1y">Last year</option>
        <option value="all">All Time</option>
      </select>
      <span className="text-xs text-gray-500 dark:text-gray-400">{formatDateRange()}</span>
    </div>
  )
}

// Main Layout Component
function AdminLayoutContent({ children }: AdminLayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const router = useRouter()
  const brandSettings = useBrandSettings()
  const { unreadCount } = useNotifications()

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile sidebar overlay */}
      {sidebarOpen && (
        <div className="fixed inset-0 z-40 lg:hidden">
          <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setSidebarOpen(false)} />
        </div>
      )}

      {/* Sidebar */}
      <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-lg transform transition-transform duration-300 ease-in-out lg:translate-x-0 ${
        sidebarOpen ? 'translate-x-0' : '-translate-x-full'
      }`}>
        <div className="flex flex-col h-full">
          {/* Logo */}
          <div className="flex items-center justify-between h-16 px-6 border-b border-gray-200 dark:border-gray-700">
            <Link href="/admin" className="flex items-center space-x-3">
              {brandSettings.logoUrl ? (
                <img 
                  src={brandSettings.logoUrl} 
                  alt={brandSettings.siteName}
                  className="h-8 w-8 rounded-full object-cover"
                />
              ) : (
                <div className="h-8 w-8 rounded-full bg-gradient-to-r from-emerald-500 to-teal-500 flex items-center justify-center">
                  <span className="text-white font-bold text-sm">
                    {brandSettings.siteName.substring(0, 2).toUpperCase()}
                  </span>
                </div>
              )}
              <span className="font-bold text-lg text-gray-800 dark:text-gray-100">{brandSettings.siteName}</span>
            </Link>
            <button
              onClick={() => setSidebarOpen(false)}
              className="lg:hidden p-1 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100"
            >
              <span className="text-xl">√ó</span>
            </button>
          </div>

          {/* Navigation */}
          <nav className="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
            {navigation.map((item) => {
              const isActive = router.pathname === item.href
              const showBadge = item.name === 'Notifications' && unreadCount > 0
              return (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`flex items-center justify-between px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                    isActive
                      ? 'bg-emerald-100 dark:bg-emerald-900 text-emerald-700 dark:text-emerald-300 border-r-2 border-emerald-500'
                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100'
                  }`}
                  onClick={() => setSidebarOpen(false)}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{item.icon}</span>
                    <span>{item.name}</span>
                  </div>
                  {showBadge && (
                    <span className="inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-500 dark:bg-red-600 rounded-full">
                      {unreadCount > 99 ? '99+' : unreadCount}
                    </span>
                  )}
                </Link>
              )
            })}
          </nav>

          {/* User section */}
          <div className="p-4 border-t border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3 mb-4">
              <div className="h-8 w-8 rounded-full bg-gray-300 flex items-center justify-center">
                <span className="text-sm font-medium text-gray-700">A</span>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900 truncate">Admin User</p>
                <p className="text-xs text-gray-500 truncate">admin@tinytastes.co.za</p>
              </div>
            </div>
            <div className="flex space-x-2">
              <Link
                href="/"
                className="flex-1 text-center px-3 py-2 text-xs font-medium text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              >
                View Site
              </Link>
              <Link
                href="/dev-login"
                className="flex-1 text-center px-3 py-2 text-xs font-medium text-white bg-emerald-600 rounded-lg hover:bg-emerald-700 transition-colors"
              >
                Logout
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="lg:ml-64">
        {/* Top bar */}
        <div className="sticky top-0 z-10 bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between h-16 px-4">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setSidebarOpen(true)}
                className="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100"
              >
                <span className="text-xl">‚ò∞</span>
              </button>
              <Link href="/admin" className="flex items-center space-x-2">
                {brandSettings.logoUrl ? (
                  <img 
                    src={brandSettings.logoUrl} 
                    alt={brandSettings.siteName}
                    className="h-6 w-6 rounded-full object-cover"
                  />
                ) : (
                  <div className="h-6 w-6 rounded-full bg-gradient-to-r from-emerald-500 to-teal-500 flex items-center justify-center">
                    <span className="text-white font-bold text-xs">
                      {brandSettings.siteName.substring(0, 2).toUpperCase()}
                    </span>
                  </div>
                )}
                <span className="font-bold text-gray-800">{brandSettings.siteName} Admin</span>
              </Link>
            </div>
            <div className="hidden lg:block">
              <DateSelector />
            </div>
            <div className="w-8 lg:hidden" /> {/* Spacer */}
          </div>
        </div>

        {/* Page content */}
        <main className="flex-1">
          {/* Mobile date selector */}
          <div className="lg:hidden bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3">
            <DateSelector />
          </div>
          {children}
        </main>
      </div>
    </div>
  )
}

// Main AdminLayout component
export default function AdminLayout({ children }: AdminLayoutProps) {
  return (
    <NotificationProvider>
      <AdminLayoutContent>{children}</AdminLayoutContent>
    </NotificationProvider>
  )
}
