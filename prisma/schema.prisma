// This is your Prisma schema file for SQLite development
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("CUSTOMER") // Changed from enum to String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  Profile?
  orders   Order[]
  cart     Cart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  phone       String?
  childName   String?
  childDob    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses Address[]
}

model Address {
  id          String   @id @default(cuid())
  profileId   String
  type        String   @default("SHIPPING") // Changed from enum to String
  street      String
  city        String
  province    String
  postalCode  String
  country     String   @default("South Africa")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders  Order[]
}

model AgeGroup {
  id        String   @id @default(cuid())
  name      String   @unique
  minMonths Int
  maxMonths Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Texture {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model PortionSize {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  measurement String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  prices       Price[]
  packageItems PackageItem[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  inventory    Inventory[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  ageGroupId  String
  textureId   String
  isActive    Boolean  @default(true)
  imageUrl    String?
  contains    String   // Changed from String[] to String (comma-separated)
  mayContain  String   // Changed from String[] to String (comma-separated)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ageGroup AgeGroup   @relation(fields: [ageGroupId], references: [id])
  texture  Texture    @relation(fields: [textureId], references: [id])
  prices   Price[]
  packageItems PackageItem[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  inventory    Inventory[]

  @@index([slug])
  @@index([isActive])
}

model Price {
  id            String      @id @default(cuid())
  productId     String
  portionSizeId String
  amountZar     Float       // Changed from Decimal to Float
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])

  @@unique([productId, portionSizeId])
}

model Package {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items PackageItem[]
  orderItems OrderItem[]

  @@index([slug])
  @@index([isActive])
}

model PackageItem {
  id            String      @id @default(cuid())
  packageId     String
  productId     String
  portionSizeId String
  quantity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  package     Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])

  @@unique([packageId, productId, portionSizeId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique // Unique order number for customer reference
  userId          String
  status          String      @default("PENDING") // PENDING, PAID, UNPAID, EXPIRED, CONFIRMED, PREPARING, READY, OUT_FOR_DELIVERY, DELIVERED, CANCELLED
  paymentStatus   String      @default("PENDING") // PENDING, PAID, UNPAID, EXPIRED
  totalZar        Float
  notes           String?
  deliveryDate    DateTime?
  paymentDueDate  DateTime?   // 24 hours from order creation
  paidAt          DateTime?   // When payment was confirmed
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  addressId  String?
  address    Address?    @relation(fields: [addressId], references: [id])
  items      OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
  @@index([deliveryDate])
  @@index([paymentDueDate])
}

model OrderItem {
  id            String      @id @default(cuid())
  orderId       String
  productId     String
  portionSizeId String
  packageId     String?
  quantity      Int
  unitPriceZar  Float       // Changed from Decimal to Float
  lineTotalZar  Float       // Changed from Decimal to Float
  createdAt     DateTime    @default(now())

  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])
  package     Package?    @relation(fields: [packageId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@unique([userId])
}

model CartItem {
  id            String      @id @default(cuid())
  cartId        String
  productId     String
  portionSizeId String
  quantity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  cart        Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])

  @@unique([cartId, productId, portionSizeId])
}

model Coupon {
  id          String      @id @default(cuid())
  code        String      @unique
  description String?
  type        String      // Changed from enum to String
  value       Float       // Changed from Decimal to Float
  minOrderAmount Float?   // Changed from Decimal to Float
  maxUses     Int?
  usedCount   Int         @default(0)
  isActive    Boolean     @default(true)
  validFrom   DateTime?
  validUntil  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([code])
  @@index([isActive])
}

model Inventory {
  id            String   @id @default(cuid())
  productId     String
  portionSizeId String
  currentStock  Int      @default(0) // Current available stock
  weeklyLimit   Int      @default(0) // Maximum stock per week
  reservedStock Int      @default(0) // Stock reserved for pending orders
  lastRestocked DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id], onDelete: Cascade)

  @@unique([productId, portionSizeId])
  @@index([currentStock])
  @@index([lastRestocked])
}
