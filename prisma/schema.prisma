// This is your Prisma schema file for SQLite development
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Added for credentials authentication
  role          String    @default("CUSTOMER") // Changed from enum to String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  profile  Profile?
  orders   Order[]
  cart     Cart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String
  lastName    String
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses Address[]
  children ChildProfile[]
}

model ChildProfile {
  id                String   @id @default(cuid())
  profileId         String
  name              String
  dateOfBirth       DateTime
  gender            String?   // MALE, FEMALE, OTHER
  allergies         String?   // JSON array of allergen IDs
  dietaryRequirements String? // JSON array of dietary requirement IDs
  foodPreferences   String?   // JSON array of liked/disliked foods
  medicalNotes      String?   // Additional medical information
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders  Order[]
  cartItems CartItem[]

  @@index([profileId])
  @@index([isActive])
}

model Allergen {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  severity    String   @default("MODERATE") // LOW, MODERATE, HIGH, CRITICAL
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productAllergens ProductAllergen[]

  @@index([name])
  @@index([severity])
  @@index([isActive])
}

model DietaryRequirement {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String   // DIETARY_RESTRICTION, PREFERENCE, MEDICAL
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  productRequirements ProductDietaryRequirement[]

  @@index([name])
  @@index([category])
  @@index([isActive])
}

model ProductAllergen {
  id         String   @id @default(cuid())
  productId  String
  allergenId String
  contains   Boolean  @default(true) // true = contains, false = may contain
  createdAt  DateTime @default(now())

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  allergen  Allergen @relation(fields: [allergenId], references: [id])

  @@unique([productId, allergenId])
  @@index([productId])
  @@index([allergenId])
}

model ProductDietaryRequirement {
  id                    String   @id @default(cuid())
  productId             String
  dietaryRequirementId  String
  isCompatible          Boolean  @default(true) // true = compatible, false = incompatible
  createdAt             DateTime @default(now())

  product             Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  dietaryRequirement  DietaryRequirement  @relation(fields: [dietaryRequirementId], references: [id])

  @@unique([productId, dietaryRequirementId])
  @@index([productId])
  @@index([dietaryRequirementId])
}

model Address {
  id          String   @id @default(cuid())
  profileId   String
  type        String   @default("SHIPPING") // Changed from enum to String
  street      String
  city        String
  province    String
  postalCode  String
  country     String   @default("South Africa")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders  Order[]
}

model AgeGroup {
  id        String   @id @default(cuid())
  name      String   @unique
  minMonths Int
  maxMonths Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Texture {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model PortionSize {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  measurement String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  prices       Price[]
  packageItems PackageItem[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  inventory    Inventory[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  ageGroupId  String
  textureId   String
  isActive    Boolean  @default(true)
  imageUrl    String?
  contains    String   // Changed from String[] to String (comma-separated)
  mayContain  String   // Changed from String[] to String (comma-separated)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ageGroup AgeGroup   @relation(fields: [ageGroupId], references: [id])
  texture  Texture    @relation(fields: [textureId], references: [id])
  prices   Price[]
  packageItems PackageItem[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  inventory    Inventory[]
  allergens    ProductAllergen[]
  dietaryRequirements ProductDietaryRequirement[]

  @@index([slug])
  @@index([isActive])
}

model Price {
  id            String      @id @default(cuid())
  productId     String
  portionSizeId String
  amountZar     Float       // Changed from Decimal to Float
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])

  @@unique([productId, portionSizeId])
}

model Package {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  items PackageItem[]
  orderItems OrderItem[]

  @@index([slug])
  @@index([isActive])
}

model PackageItem {
  id            String      @id @default(cuid())
  packageId     String
  productId     String
  portionSizeId String
  quantity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  package     Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])

  @@unique([packageId, productId, portionSizeId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique // Unique order number for customer reference
  userId          String
  childProfileId  String?     // Optional: which child this order is for
  status          String      @default("PENDING") // PENDING, PAID, UNPAID, EXPIRED, CONFIRMED, PREPARING, READY, OUT_FOR_DELIVERY, DELIVERED, CANCELLED
  paymentStatus   String      @default("PENDING") // PENDING, PAID, UNPAID, EXPIRED
  totalZar        Float
  notes           String?
  deliveryDate    DateTime?
  paymentDueDate  DateTime?   // 24 hours from order creation
  paidAt          DateTime?   // When payment was confirmed
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user         User        @relation(fields: [userId], references: [id])
  childProfile ChildProfile? @relation(fields: [childProfileId], references: [id])
  addressId    String?
  address      Address?    @relation(fields: [addressId], references: [id])
  items        OrderItem[]

  @@index([userId])
  @@index([childProfileId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
  @@index([deliveryDate])
  @@index([paymentDueDate])
}

model OrderItem {
  id            String      @id @default(cuid())
  orderId       String
  productId     String
  portionSizeId String
  packageId     String?
  quantity      Int
  unitPriceZar  Float       // Changed from Decimal to Float
  lineTotalZar  Float       // Changed from Decimal to Float
  createdAt     DateTime    @default(now())

  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])
  package     Package?    @relation(fields: [packageId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@unique([userId])
}

model CartItem {
  id            String      @id @default(cuid())
  cartId        String
  productId     String
  portionSizeId String
  quantity      Int
  notes         String?
  childProfileId String?
  shoppingMode  String      @default("family")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  cart        Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id])
  childProfile ChildProfile? @relation(fields: [childProfileId], references: [id])

  @@unique([cartId, productId, portionSizeId])
}

model Coupon {
  id          String      @id @default(cuid())
  code        String      @unique
  description String?
  type        String      // Changed from enum to String
  value       Float       // Changed from Decimal to Float
  minOrderAmount Float?   // Changed from Decimal to Float
  maxUses     Int?
  usedCount   Int         @default(0)
  isActive    Boolean     @default(true)
  validFrom   DateTime?
  validUntil  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([code])
  @@index([isActive])
}

model Ingredient {
  id            String   @id @default(cuid())
  name          String
  category      String   // Fruits, Vegetables, Grains, Proteins, Dairy, Spices
  unit          String   // kg, g, l, ml, cup, tbsp, tsp, piece
  currentStock  Float    @default(0)
  minStock      Float    @default(0)
  maxStock      Float    @default(0)
  unitCost      Float    @default(0) // Cost per unit in ZAR
  supplier      String
  status        String   @default("active") // active, inactive
  lastRestocked DateTime @default(now())
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([name])
  @@index([category])
  @@index([status])
  @@index([currentStock])
}

model Inventory {
  id            String   @id @default(cuid())
  productId     String
  portionSizeId String
  currentStock  Int      @default(0) // Current available stock
  weeklyLimit   Int      @default(0) // Maximum stock per week
  reservedStock Int      @default(0) // Stock reserved for pending orders
  lastRestocked DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  portionSize PortionSize @relation(fields: [portionSizeId], references: [id], onDelete: Cascade)

  @@unique([productId, portionSizeId])
  @@index([currentStock])
  @@index([lastRestocked])
}

model SecurityEvent {
  id          String   @id @default(cuid())
  type        String   // login, logout, failed_login, password_change, admin_access, suspicious_activity, data_export
  userId      String?
  userEmail   String?
  ipAddress   String
  userAgent   String?
  location    String?
  status      String   // success, warning, danger
  severity    String   // low, medium, high, critical
  details     String?
  metadata    String?  // JSON string for additional data
  incidentId  String?  // Link to SecurityIncident if part of an incident
  createdAt   DateTime @default(now())

  // Relations
  incident    SecurityIncident? @relation(fields: [incidentId], references: [id])

  @@index([type])
  @@index([userId])
  @@index([ipAddress])
  @@index([severity])
  @@index([incidentId])
  @@index([createdAt])
}

model SecurityAlert {
  id          String   @id @default(cuid())
  type        String   // failed_login, suspicious_ip, data_breach, unusual_activity
  title       String
  description String
  severity    String   // low, medium, high, critical
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
}

model BlockedIP {
  id        String   @id @default(cuid())
  ipAddress String   @unique
  reason    String
  blockedBy String
  metadata  String?  // JSON string for additional data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ipAddress])
  @@index([createdAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  userEmail   String?
  action      String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, EXPORT, etc.
  resource    String   // products, orders, customers, etc.
  resourceId  String?
  ipAddress   String?
  userAgent   String?
  details     String?
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

model StoreSettings {
  id          String   @id @default(cuid())
  category    String   // 'general', 'business', 'delivery', 'payment', 'notifications', 'security', 'ui'
  key         String   // Setting key
  value       String   // Setting value (JSON string for complex values)
  description String?   // Human-readable description
  isActive    Boolean  @default(true)
  updatedBy   String?  // User ID who last updated
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, key])
  @@index([category])
  @@index([key])
  @@index([updatedAt])
}

model SettingsHistory {
  id          String   @id @default(cuid())
  category    String
  key         String
  oldValue    String?
  newValue    String
  changedBy   String?  // User ID who made the change
  changeReason String? // Optional reason for the change
  createdAt   DateTime @default(now())

  @@index([category])
  @@index([key])
  @@index([changedBy])
  @@index([createdAt])
}

model SecurityIncident {
  id                String   @id @default(cuid())
  incidentId       String   @unique // Human-readable incident ID (e.g., INC-2025-001)
  title            String
  description      String
  type             String   // 'suspicious_activity', 'failed_login', 'data_breach', 'malware', 'phishing', 'ddos', 'unauthorized_access'
  severity         String   // 'critical', 'high', 'medium', 'low', 'info'
  status           String   // 'open', 'investigating', 'contained', 'resolved', 'closed'
  priority         String   // 'p1', 'p2', 'p3', 'p4'
  riskScore        Int      // 0-100 risk assessment score
  source           String   // 'automated', 'manual', 'external', 'user_report'
  affectedSystems  String?  // JSON array of affected systems
  indicators        String?  // JSON array of IOCs (Indicators of Compromise)
  timeline         String?  // JSON array of timeline events
  evidence         String?  // JSON array of evidence collected
  actions          String?  // JSON array of actions taken
  lessons          String?  // JSON array of lessons learned
  assignedTo       String?  // User ID assigned to investigate
  reportedBy        String?  // User ID who reported the incident
  reportedAt        DateTime @default(now())
  detectedAt        DateTime @default(now())
  containedAt       DateTime?
  resolvedAt        DateTime?
  closedAt          DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  events           SecurityEvent[]
  comments         SecurityIncidentComment[]

  @@index([incidentId])
  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([priority])
  @@index([riskScore])
  @@index([assignedTo])
  @@index([reportedAt])
  @@index([detectedAt])
  @@index([createdAt])
}

model SecurityIncidentComment {
  id          String   @id @default(cuid())
  incidentId  String
  authorId    String   // User ID who wrote the comment
  content     String
  isInternal  Boolean  @default(false) // Internal notes vs public comments
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  incident    SecurityIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId])
  @@index([authorId])
  @@index([createdAt])
}

model SecurityPlaybook {
  id          String   @id @default(cuid())
  name        String
  description String
  type        String   // 'incident_type', 'response_procedure', 'escalation_rule'
  category    String   // 'malware', 'phishing', 'data_breach', 'ddos', etc.
  severity    String   // 'critical', 'high', 'medium', 'low'
  steps       String   // JSON array of response steps
  conditions  String?  // JSON array of conditions that trigger this playbook
  isActive    Boolean  @default(true)
  version     String   @default("1.0")
  createdBy   String   // User ID who created the playbook
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([category])
  @@index([severity])
  @@index([isActive])
  @@index([createdAt])
}

model SecurityThreatIntelligence {
  id          String   @id @default(cuid())
  type        String   // 'ip_address', 'domain', 'hash', 'email', 'url'
  value       String   // The actual threat indicator
  threatType  String   // 'malware', 'phishing', 'botnet', 'c2', 'spam'
  severity    String   // 'critical', 'high', 'medium', 'low'
  confidence  Int      // 0-100 confidence score
  source      String   // 'internal', 'external', 'feed', 'manual'
  description String?
  tags        String?  // JSON array of tags
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([type, value])
  @@index([type])
  @@index([threatType])
  @@index([severity])
  @@index([confidence])
  @@index([isActive])
  @@index([firstSeen])
  @@index([lastSeen])
}
